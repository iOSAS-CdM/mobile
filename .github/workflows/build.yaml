# This workflow performs a pure native Android release build without using EAS.
# It requires custom GitHub Secrets for signing.

name: Pure Native Android Build (APK)

on:
    # Trigger the workflow automatically on push to the main branch
    push:
        branches:
            - master
    # Allows you to manually trigger the workflow from the GitHub Actions UI
    workflow_dispatch:

jobs:
    android_build:
        runs-on: ubuntu-latest

        steps:
            - name: üèó Checkout Repository
              uses: actions/checkout@v4

            # --- SETUP ENVIRONMENT ---

            - name: üèó Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20.x
                  cache: 'npm'

            - name: üì¶ Install JavaScript Dependencies
              run: npm install

            - name: ‚òï Setup Java
              uses: actions/setup-java@v4
              with:
                  distribution: 'temurin'
                  java-version: '17'
                  cache: 'gradle'

            - name: ü§ñ Setup Android SDK
              # This action automatically downloads and sets up the necessary Android SDK components
              uses: android-actions/setup-android@v3

            # --- PREPARE SECRETS FOR SIGNING ---

            # 1. Decode the Base64 Keystore file from GitHub Secret (KEYSTORE_BASE64)
            # This step creates the required upload-keystore.jks file in the android/app directory.
            - name: üîë Create Keystore File
              env:
                KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
              run: |
                  echo $KEYSTORE_BASE64 | base64 -d > android/app/upload-keystore.jks

            # 2. Configure Gradle with the signing credentials
            # This writes the secrets into a gradle.properties file, which is consumed by the
            # android/app/build.gradle file for release signing.
            - name: ‚öôÔ∏è Setup Gradle Properties
              run: |
                echo "MYAPP_UPLOAD_STORE_FILE=upload-keystore.jks" >> android/gradle.properties
                echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> android/gradle.properties
                echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.STORE_PASSWORD }}" >> android/gradle.properties
                echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> android/gradle.properties

            # --- RUN BUILD ---

            - name: üöÄ Run Native Android Release Build (APK)
              # We run the assembleRelease Gradle task to generate a signed APK.
              run: |
                cd android
                ./gradlew assembleRelease

            # --- UPLOAD ARTIFACT ---

            - name: ‚¨ÜÔ∏è Upload Signed APK Artifact
              uses: actions/upload-artifact@v4
              with:
                # The resulting APK is uploaded as an artifact for easy download from the GitHub Actions UI
                name: android-release-apk-${{ github.sha }}
                path: android/app/build/outputs/apk/release/app-release.apk
                retention-days: 7